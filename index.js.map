{"version":3,"file":"index.js","sources":["../src/ts/dom-elements.ts","../src/ts/theme-and-fonts.ts","../src/ts/result-builder.ts","../src/ts/index.ts"],"sourcesContent":["interface DomObj {\r\n    body: HTMLBodyElement\r\n    dayNightCheckbox: HTMLInputElement\r\n    fontSelectorBackdrop: HTMLDivElement\r\n    fontsSelectWindow: HTMLUListElement\r\n    fontOpenBtn: HTMLButtonElement\r\n    selectedFont: HTMLParagraphElement\r\n    form: HTMLFormElement\r\n    resultContainer: HTMLDivElement\r\n}\r\nconst domElems:DomObj = {\r\n    body: document.querySelector(\"body\")!,\r\n    // Theme selector\r\n    dayNightCheckbox: document.querySelector(\".header__toggle-checkbox\")!,\r\n    // Font selector\r\n    fontSelectorBackdrop: document.querySelector(\".header__font-selector-backdrop\")!,\r\n    fontsSelectWindow: document.querySelector(\".header__font-selector-list\")!,\r\n    fontOpenBtn: document.querySelector(\".header__font-selector-open-btn\")!,\r\n    selectedFont: document.querySelector(\".header__selected-font-para\")!,\r\n    // Form\r\n    form: document.querySelector(\".hero__search-form\")!,\r\n    // Result\r\n    resultContainer: document.querySelector(\".result__container\")!,\r\n}\r\n\r\nexport const delay = (ms: number) => { return new Promise(resolve => setTimeout(resolve, ms)) }\r\n\r\nexport const {\r\n    body,\r\n    dayNightCheckbox,\r\n    fontSelectorBackdrop,\r\n    fontsSelectWindow,\r\n    fontOpenBtn,\r\n    selectedFont,\r\n    form,\r\n    resultContainer,\r\n} = domElems","import { body, dayNightCheckbox, fontSelectorBackdrop, fontsSelectWindow, fontOpenBtn, selectedFont } from \"./dom-elements\";\r\n\r\n\r\ndayNightCheckbox.addEventListener(\"click\", themeCheck)\r\nfontOpenBtn.addEventListener(\"click\", fontsOpenClose)\r\nfontSelectorBackdrop.addEventListener(\"click\", fontsOpenClose)\r\nfontsSelectWindow.addEventListener(\"click\", selectFont)\r\n\r\nfunction themeCheck(): void {\r\n    if (dayNightCheckbox.checked) {\r\n        body.classList.remove(\"body_light\")\r\n        body.classList.add(\"body_dark\")\r\n    } else {\r\n        body.classList.remove(\"body_dark\")\r\n        body.classList.add(\"body_light\")\r\n    }\r\n}\r\n\r\nfunction fontsOpenClose(): void {\r\n    if (fontsSelectWindow.classList.contains(\"header__font-selector-list_open\")) {\r\n        fontsSelectWindow.classList.remove(\"header__font-selector-list_open\")\r\n        fontSelectorBackdrop.classList.add(\"disabled\")\r\n        window.removeEventListener(\"scroll\", fontsOpenClose)\r\n    } else {\r\n        fontsSelectWindow.classList.add(\"header__font-selector-list_open\")\r\n        fontSelectorBackdrop.classList.remove(\"disabled\")\r\n        window.addEventListener(\"scroll\", fontsOpenClose)\r\n    }\r\n}\r\n\r\nfunction selectFont(e: Event): void {\r\n    const target = e.target as HTMLUListElement | HTMLLIElement | HTMLButtonElement\r\n    if (target.nodeName === \"BUTTON\") {\r\n        const sansSerif: string = \"body_sans-serif\"\r\n        const serif: string = \"body_serif\"\r\n        const mono: string = \"body_mono\"\r\n\r\n        if (target.classList.contains(\"header__sans-serif-btn\")) {\r\n            body.classList.add(sansSerif)\r\n            body.classList.remove(serif)\r\n            body.classList.remove(mono)\r\n            if (selectedFont) selectedFont.textContent = \"Sans Serif\"\r\n        } else if (target.classList.contains(\"header__serif-btn\")) {\r\n            body.classList.add(serif)\r\n            body.classList.remove(sansSerif)\r\n            body.classList.remove(mono)\r\n            if (selectedFont) selectedFont.textContent = \"Serif\"\r\n        } else {\r\n            body.classList.add(mono)\r\n            body.classList.remove(sansSerif)\r\n            body.classList.remove(serif)\r\n            if (selectedFont) selectedFont.textContent = \"Mono\"\r\n        }\r\n    }\r\n}","export default buildResultSection\r\n\r\n\r\nfunction buildResultSection(data: APIResponseData): string {\r\n    const {\r\n        word,\r\n        phonetic,\r\n    } = data\r\n    const resultDomArr: string[] = []\r\n    const wordResult = `<div class=\"result__result-wrapper\">\r\n            <div class=\"result__word-wrapper\">\r\n                <h1 class=\"result__title\">${word}</h1>\r\n                <p class=\"result__transcription\">${phonetic}</p>\r\n            </div>\r\n            <button class=\"result__play-btn button\" type=\"button\">\r\n                <svg class=\"result__play-icon\">\r\n                    <use href=\"./assets/images/sprite.svg#icon-play\" />\r\n                </svg>\r\n            </button>\r\n        </div>`\r\n\r\n    return resultDomArr.join(\",\")\r\n}\r\n\r\nexport interface APIResponseData {\r\n    word: string,\r\n    phonetic: string,\r\n    phonetics: {\r\n        text: string,\r\n        audio: string,\r\n        sourceUrl?: string,\r\n        license?: {\r\n            name: string,\r\n            url: string\r\n        }\r\n    }[]\r\n    meanings: {\r\n        partOfSpeech: string,\r\n        definitions: {\r\n            definition: string,\r\n            synonyms: string[],\r\n            antonyms: string[],\r\n            example?: string\r\n        }[],\r\n        synonyms: string[]\r\n        antonyms: string[]\r\n    }[]\r\n    license: {\r\n      name: string,\r\n      url: string\r\n    },\r\n    sourceUrls: string[]\r\n  }","import axios, { AxiosError, AxiosResponse } from \"axios\"\r\nimport buildResultSection from \"./result-builder\"\r\nimport { form } from \"./dom-elements\"\r\nimport { APIResponseData } from \"./result-builder\"\r\n\r\nform?.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault()\r\n    const searchInput = form.elements[0] as HTMLInputElement\r\n    const data: APIResponseData[] | void = await fetchData(searchInput.value)\r\n    if (data) buildResultSection(data[0])\r\n    })\r\n\r\nasync function fetchData(word: string) {\r\n    return axios(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\r\n        .then((res: AxiosResponse): APIResponseData[] => {\r\n            console.log(res.data)\r\n            return res.data\r\n        })\r\n        .catch((err: AxiosError): void => console.log(err))\r\n}\r\n\r\nconst testData: APIResponseData =  {\r\n    word: \"keyboard\",\r\n    phonetic: \"/ˈkiːbɔːd/\",\r\n    phonetics: [\r\n      {\r\n        text: \"/ˈkiːbɔːd/\",\r\n        audio: \"\"\r\n      },\r\n      {\r\n        text: \"/ˈkiːbɔːd/\",\r\n        audio: \"\"\r\n      },\r\n      {\r\n        text: \"/ˈkibɔɹd/\",\r\n        audio: \"https://api.dictionaryapi.dev/media/pronunciations/en/keyboard-us.mp3\",\r\n        sourceUrl: \"https://commons.wikimedia.org/w/index.php?curid=1755168\",\r\n        license: {\r\n          name: \"BY-SA 3.0\",\r\n          url: \"https://creativecommons.org/licenses/by-sa/3.0\"\r\n        }\r\n      }\r\n    ],\r\n    meanings: [\r\n      {\r\n        partOfSpeech: \"noun\",\r\n        definitions: [\r\n          {\r\n            definition: \"(etc.) A set of keys used to operate a typewriter, computer etc.\",\r\n            synonyms: [],\r\n            antonyms: []\r\n          },\r\n          {\r\n            definition: \"A component of many instruments including the piano, organ, and harpsichord consisting of usually black and white keys that cause different tones to be produced when struck.\",\r\n            synonyms: [],\r\n            antonyms: []\r\n          },\r\n          {\r\n            definition: \"A device with keys of a musical keyboard, used to control electronic sound-producing devices which may be built into or separate from the keyboard device.\",\r\n            synonyms: [],\r\n            antonyms: []\r\n          }\r\n        ],\r\n        synonyms: [\r\n          \"electronic keyboard\"\r\n        ],\r\n        antonyms: []\r\n      },\r\n      {\r\n        partOfSpeech: \"verb\",\r\n        definitions: [\r\n          {\r\n            definition: \"To type on a computer keyboard.\",\r\n            synonyms: [],\r\n            antonyms: [],\r\n            example: \"Keyboarding is the part of this job I hate the most.\"\r\n          }\r\n        ],\r\n        synonyms: [],\r\n        antonyms: []\r\n      }\r\n    ],\r\n    license: {\r\n      name: \"CC BY-SA 3.0\",\r\n      url: \"https://creativecommons.org/licenses/by-sa/3.0\"\r\n    },\r\n    sourceUrls: [\r\n      \"https://en.wiktionary.org/wiki/keyboard\"\r\n    ]\r\n  }\r\n\r\n\r\n"],"names":["domElems","body","dayNightCheckbox","fontSelectorBackdrop","fontsSelectWindow","fontOpenBtn","selectedFont","form","resultContainer","themeCheck","fontsOpenClose","selectFont","e","target","sansSerif","serif","mono","buildResultSection","data","searchInput","fetchData","word","axios","res","err"],"mappings":"svBAUA,MAAMA,EAAkB,CACpB,KAAM,SAAS,cAAc,MAAM,EAEnC,iBAAkB,SAAS,cAAc,0BAA0B,EAEnE,qBAAsB,SAAS,cAAc,iCAAiC,EAC9E,kBAAmB,SAAS,cAAc,6BAA6B,EACvE,YAAa,SAAS,cAAc,iCAAiC,EACrE,aAAc,SAAS,cAAc,6BAA6B,EAElE,KAAM,SAAS,cAAc,oBAAoB,EAEjD,gBAAiB,SAAS,cAAc,oBAAoB,CAChE,EAIa,CACT,KAAAC,EACA,iBAAAC,EACA,qBAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,aAAAC,EACA,KAAAC,EACA,gBAAAC,CACJ,EAAIR,ECjCJE,EAAiB,iBAAiB,QAASO,CAAU,EACrDJ,EAAY,iBAAiB,QAASK,CAAc,EACpDP,EAAqB,iBAAiB,QAASO,CAAc,EAC7DN,EAAkB,iBAAiB,QAASO,CAAU,EAEtD,SAASF,GAAmB,CACpBP,EAAiB,SACZD,EAAA,UAAU,OAAO,YAAY,EAC7BA,EAAA,UAAU,IAAI,WAAW,IAEzBA,EAAA,UAAU,OAAO,WAAW,EAC5BA,EAAA,UAAU,IAAI,YAAY,EAEvC,CAEA,SAASS,GAAuB,CACxBN,EAAkB,UAAU,SAAS,iCAAiC,GACpDA,EAAA,UAAU,OAAO,iCAAiC,EAC/CD,EAAA,UAAU,IAAI,UAAU,EACtC,OAAA,oBAAoB,SAAUO,CAAc,IAEjCN,EAAA,UAAU,IAAI,iCAAiC,EAC5CD,EAAA,UAAU,OAAO,UAAU,EACzC,OAAA,iBAAiB,SAAUO,CAAc,EAExD,CAEA,SAASC,EAAWC,EAAgB,CAChC,MAAMC,EAASD,EAAE,OACb,GAAAC,EAAO,WAAa,SAAU,CAC9B,MAAMC,EAAoB,kBACpBC,EAAgB,aAChBC,EAAe,YAEjBH,EAAO,UAAU,SAAS,wBAAwB,GAC7CZ,EAAA,UAAU,IAAIa,CAAS,EACvBb,EAAA,UAAU,OAAOc,CAAK,EACtBd,EAAA,UAAU,OAAOe,CAAI,EACtBV,IAAcA,EAAa,YAAc,eACtCO,EAAO,UAAU,SAAS,mBAAmB,GAC/CZ,EAAA,UAAU,IAAIc,CAAK,EACnBd,EAAA,UAAU,OAAOa,CAAS,EAC1Bb,EAAA,UAAU,OAAOe,CAAI,EACtBV,IAAcA,EAAa,YAAc,WAExCL,EAAA,UAAU,IAAIe,CAAI,EAClBf,EAAA,UAAU,OAAOa,CAAS,EAC1Bb,EAAA,UAAU,OAAOc,CAAK,EACvBT,IAAcA,EAAa,YAAc,QAErD,CACJ,CCnDA,SAASW,EAAmBC,EAA+B,CAkBhD,MAbwB,CAAA,EAaX,KAAK,GAAG,CAChC,CCjBAX,GAAA,MAAAA,EAAM,iBAAiB,SAAU,MAAOK,GAAM,CAC1CA,EAAE,eAAe,EACX,MAAAO,EAAcZ,EAAK,SAAS,CAAC,EAC7BW,EAAiC,MAAME,EAAUD,EAAY,KAAK,EACpED,GAAyBD,EAAAC,EAAK,CAAC,CAAC,CACpC,GAEJ,eAAeE,EAAUC,EAAc,CACnC,OAAOC,EAAM,mDAAmDD,CAAI,EAAE,EACjE,KAAME,IACK,QAAA,IAAIA,EAAI,IAAI,EACbA,EAAI,KACd,EACA,MAAOC,GAA0B,QAAQ,IAAIA,CAAG,CAAC,CAC1D"}